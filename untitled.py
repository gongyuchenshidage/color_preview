# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os

import vtk
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import *
from PyQt5.QtGui import *
from PyQt5.QtCore import *
# from PyQt5.QtWidgets import QGridLayout, QFileDialog, QSlider
from pathlib import Path
from vtk.qt.QVTKRenderWindowInteractor import QVTKRenderWindowInteractor

import gcode
import gui_utils
import locales
import params

lines=[]
layerm=0
filename=""
class Ui_MainWindow(object):
    one_color_radio = None
    much_layers_radio = None
    mix_colors_radio = None
    one_color_item = None
    handle = None
    totalHeight = None
    namein = None
    slider = None

    def setupUi(self, MainWindow):
        global trans
        trans = MainWindow

        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(1378, 978)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.frame_2 = QtWidgets.QFrame(self.centralwidget)
        self.frame_2.setGeometry(QtCore.QRect(80, 121, 631, 101))
        self.frame_2.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.frame_2)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(20, 10, 601, 80))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")

        Ui_MainWindow.one_color_radio = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        Ui_MainWindow.one_color_radio.setEnabled(False)
        Ui_MainWindow.one_color_radio.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        Ui_MainWindow.one_color_radio.setMouseTracking(False)
        Ui_MainWindow.one_color_radio.setCheckable(True)
        Ui_MainWindow.one_color_radio.setChecked(False)
        Ui_MainWindow.one_color_radio.setAutoRepeatInterval(99)
        Ui_MainWindow.one_color_radio.setObjectName("one_color_radio")
        Ui_MainWindow.one_color_radio.setStyleSheet("font: 11pt \"宋体\";")
        self.verticalLayout.addWidget(Ui_MainWindow.one_color_radio)
        self.one_color_choose = QtWidgets.QHBoxLayout()
        self.one_color_choose.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.one_color_choose.setObjectName("one_color_choose")
        self.label_select_one_color = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.label_select_one_color.setObjectName("label_select_one_color")
        self.label_select_one_color.setStyleSheet("font: 10pt \"宋体\";")
        self.one_color_choose.addWidget(self.label_select_one_color)
        Ui_MainWindow.one_color_item = QtWidgets.QPushButton(self.verticalLayoutWidget)
        Ui_MainWindow.one_color_item.setStyleSheet("border-color: rgb(255, 255, 255);")
        Ui_MainWindow.one_color_item.setObjectName("one_color_item")
        # Ui_MainWindow.one_color_item.setStyleSheet("background-color: rgb(167, 210, 222);\n"
        #                                 "font: 10pt \"宋体\";")
        Ui_MainWindow.one_color_item.setEnabled(False)
        self.one_color_choose.addWidget(Ui_MainWindow.one_color_item)
        self.verticalLayout.addLayout(self.one_color_choose)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(80, 220, 631, 301))
        self.frame_3.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.layoutWidget = QtWidgets.QWidget(self.frame_3)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 20, 601, 271))
        self.layoutWidget.setObjectName("layoutWidget")
        self.much_layers_choose = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.much_layers_choose.setContentsMargins(0, 0, 0, 0)
        self.much_layers_choose.setObjectName("much_layers_choose")
        Ui_MainWindow.much_layers_radio = QtWidgets.QRadioButton(self.layoutWidget)
        Ui_MainWindow.much_layers_radio.setEnabled(False)
        Ui_MainWindow.much_layers_radio.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))
        Ui_MainWindow.much_layers_radio.setStyleSheet("border-color: rgb(0, 0, 255);")
        Ui_MainWindow.much_layers_radio.setObjectName("much_layers_radio")
        Ui_MainWindow.much_layers_radio.setStyleSheet("border-color: rgb(0, 0, 255);font: 11pt \"宋体\";")
        self.much_layers_choose.addWidget(Ui_MainWindow.much_layers_radio)
        self.layers_num_input = QtWidgets.QHBoxLayout()
        self.layers_num_input.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)
        self.layers_num_input.setObjectName("layers_num_input")
        self.layers_num_label = QtWidgets.QLabel(self.layoutWidget)
        self.layers_num_label.setStyleSheet("font: 10pt \"宋体\";")
        self.layers_num_label.setObjectName("layers_num_label")
        self.layers_num_input.addWidget(self.layers_num_label)
        self.layers_num = QtWidgets.QLineEdit(self.layoutWidget)
        self.layers_num.setStyleSheet("border-radius:5px;\n"
                                      "border: 1px solid gray")
        self.layers_num.setEnabled(False)
        self.layers_num.setText("")
        self.layers_num.setObjectName("layers_num")
        self.layers_num_input.addWidget(self.layers_num)

        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.checkBox_3 = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBox_3.setAutoExclusive(True)
        self.checkBox_3.setObjectName("checkBox_3")
        self.horizontalLayout_3.addWidget(self.checkBox_3)
        self.checkBox_4 = QtWidgets.QCheckBox(self.layoutWidget)
        self.checkBox_4.setAutoExclusive(True)
        self.checkBox_4.setObjectName("checkBox_4")
        self.horizontalLayout_3.addWidget(self.checkBox_4)
        self.much_layers_choose.addLayout(self.horizontalLayout_3)
        self.much_layers_choose.setStretch(2, 1)
        self.checkBox_3.setEnabled(False)
        self.checkBox_4.setEnabled(False)
        self.much_layers_radio.setAutoExclusive(False)

        self.much_layers_choose.addLayout(self.layers_num_input)
        self.much_layers_option = QtWidgets.QVBoxLayout()
        self.much_layers_choose.addLayout(self.much_layers_option)
        self.much_layers_options1 = QtWidgets.QWidget()
        self.much_layers_options1.setMinimumSize(450, 1200)
        self.scroll1 = QtWidgets.QScrollArea()
        self.much_layers_option.addWidget(self.scroll1)  # vbox.addwidget(scroll)
        self.scroll1.setWidget(self.much_layers_options1)
        self.much_layers_options = QtWidgets.QVBoxLayout()
        self.frame_4 = QtWidgets.QFrame(self.centralwidget)
        self.frame_4.setGeometry(QtCore.QRect(80, 520, 631, 311))
        self.frame_4.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.layoutWidget1 = QtWidgets.QWidget(self.frame_4)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 20, 601, 281))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.mix_color_choose = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.mix_color_choose.setContentsMargins(0, 0, 0, 0)
        self.mix_color_choose.setObjectName("mix_color_choose")
        Ui_MainWindow.mix_colors_radio = QtWidgets.QRadioButton(self.layoutWidget1)
        Ui_MainWindow.mix_colors_radio.setEnabled(False)
        Ui_MainWindow.mix_colors_radio.setCursor(QtGui.QCursor(QtCore.Qt.PointingHandCursor))

        Ui_MainWindow.mix_colors_radio.setObjectName("mix_colors_radio")
        Ui_MainWindow.mix_colors_radio.setStyleSheet("font: 11pt \"宋体\";")
        self.mix_color_choose.addWidget(Ui_MainWindow.mix_colors_radio)
        self.mix_colors_input = QtWidgets.QHBoxLayout()
        self.mix_colors_input.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.mix_colors_input.setObjectName("mix_colors_input")
        self.mix_colors_num_label = QtWidgets.QLabel(self.layoutWidget1)
        self.mix_colors_num_label.setObjectName("mix_colors_num_label")
        self.mix_colors_num_label.setStyleSheet("font: 10pt \"宋体\";")
        self.mix_colors_input.addWidget(self.mix_colors_num_label)
        self.mix_colors_num = QtWidgets.QLineEdit(self.layoutWidget1)
        self.mix_colors_num.setEnabled(False)
        self.mix_colors_num.setStyleSheet("border-radius:5px;\n"
                                          "border: 1px solid gray")
        self.mix_colors_num.setText("")

        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.checkBox_2 = QtWidgets.QCheckBox(self.layoutWidget1)
        self.checkBox_2.setAutoExclusive(True)
        self.checkBox_2.setObjectName("checkBox_2")
        self.horizontalLayout_2.addWidget(self.checkBox_2)
        self.checkBox = QtWidgets.QCheckBox(self.layoutWidget1)
        self.checkBox.setAutoExclusive(True)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_2.addWidget(self.checkBox)
        self.mix_color_choose.addLayout(self.horizontalLayout_2)
        self.mix_color_choose.setStretch(2, 1)
        self.checkBox_2.setEnabled(False)
        self.checkBox.setEnabled(False)
        self.mix_colors_radio.setAutoExclusive(False)

        self.mix_colors_num.setObjectName("mix_colors_num")
        self.mix_colors_input.addWidget(self.mix_colors_num)
        self.mix_color_choose.addLayout(self.mix_colors_input)
        self.mix_colors_option = QtWidgets.QVBoxLayout()
        self.mix_color_choose.addLayout(self.mix_colors_option)  # 滚动条
        self.mix_colors_options1 = QtWidgets.QWidget()
        self.mix_colors_options1.setMinimumSize(450, 1200)
        self.scroll2 = QtWidgets.QScrollArea()
        self.mix_colors_option.addWidget(self.scroll2)  # vbox.addwidget(scroll)
        self.scroll2.setWidget(self.mix_colors_options1)
        self.mix_colors_options = QtWidgets.QVBoxLayout()
        self.layoutWidget2 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget2.setGeometry(QtCore.QRect(80, 830, 631, 71))
        self.layoutWidget2.setObjectName("layoutWidget2")
        #        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget2)
        #       self.horizontalLayout.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        #      self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        #     self.horizontalLayout.setObjectName("horizontalLayout")
        self.label = QtWidgets.QLabel(self.layoutWidget2)
        self.label.setText("")
        self.label.setObjectName("label")
        # self.horizontalLayout.addWidget(self.label)
        Ui_MainWindow.handle = QtWidgets.QPushButton(self.centralwidget)
        Ui_MainWindow.handle.setGeometry(QtCore.QRect(620, 850, 191, 51))
        Ui_MainWindow.handle.setObjectName("handle")
        Ui_MainWindow.handle.setStyleSheet("font: 12pt \"宋体\";\n"
                                           "background-color: rgb(167, 210, 222);\n"
                                           "\n"
                                           "\n"
                                           "border-radius:25px")
        Ui_MainWindow.handle.setEnabled(False)
        #    self.horizontalLayout.addWidget(Ui_MainWindow.handle)
        #   self.label_2 = QtWidgets.QLabel(self.layoutWidget2)
        #  self.label_2.setText("")
        # self.label_2.setObjectName("label_2")
        # self.horizontalLayout.addWidget(self.label_2)

        self.suggestion = QtWidgets.QLabel(self.centralwidget)
        self.suggestion.setGeometry(QtCore.QRect(300, 870, 150, 25))
        self.suggestion.setStyleSheet("font: 11pt \"宋体\";")
        self.suggestion1 = QtWidgets.QLabel(self.centralwidget)
        self.suggestion1.setGeometry(1160, 35, 150, 25)
        self.suggestion1.setStyleSheet("font: 11pt \"宋体\";")

        # 300, 920, 200, 25
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(679, 865, 21, 20))
        self.label_2.setStyleSheet("image:url(:/png/icon/deal small.png);")
        # self.label_2.setPixmap(QtGui.QPixmap(":/qrc test/resource/deal small.png"))

        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(220, 20, 921, 61))
        self.frame.setFrameShape(QtWidgets.QFrame.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.layoutWidget3 = QtWidgets.QWidget(self.frame)
        self.layoutWidget3.setGeometry(QtCore.QRect(50, 0, 861, 61))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.Layoutin = QtWidgets.QHBoxLayout(self.layoutWidget3)
        self.Layoutin.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.Layoutin.setContentsMargins(0, 0, 0, 0)
        self.Layoutin.setSpacing(7)
        self.Layoutin.setObjectName("Layoutin")
        self.name_label = QtWidgets.QLabel(self.layoutWidget3)
        self.name_label.setStyleSheet("font: 11pt \"宋体\";")
        self.name_label.setObjectName("name_label")
        self.Layoutin.addWidget(self.name_label)
        Ui_MainWindow.namein = QtWidgets.QLabel(self.layoutWidget3)
        Ui_MainWindow.namein.setWordWrap(True)
        Ui_MainWindow.namein.setObjectName("namein")
        self.Layoutin.addWidget(Ui_MainWindow.namein)
        self.selectnamein = QtWidgets.QPushButton(self.layoutWidget3)
        self.selectnamein.setStyleSheet("background-color: rgb(167, 210, 222);\n"
                                        "font: 11pt \"宋体\";")
        self.selectnamein.setObjectName("selectnamein")
        _translate = QtCore.QCoreApplication.translate
        self.selectnamein.clicked.connect(self.openFile)
        self.selectnamein.setText(_translate("MainWindow", "文件目录"))
        self.Layoutin.addWidget(self.selectnamein)
        Ui_MainWindow.totalHeight = QtWidgets.QLabel(self.layoutWidget3)
        Ui_MainWindow.totalHeight.setWordWrap(True)

        Ui_MainWindow.totalHeight.setObjectName("Heightshow")
        self.Layoutin.addWidget(Ui_MainWindow.totalHeight)
        self.Layoutin.setStretch(1, 1)
        self.Layoutin.setStretch(3, 1)
        self.label_7 = QtWidgets.QLabel(self.frame)
        self.label_7.setGeometry(QtCore.QRect(-10, 10, 71, 41))
        self.label_7.setStyleSheet("image: url(:/png/icon/1137264.png);")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(110, 94, 111, 31))
        self.label_4.setStyleSheet("font: 13pt \"黑体\";")
        self.label_4.setObjectName("label_4")
        self.frame_5 = QtWidgets.QFrame(self.centralwidget)
        self.frame_5.setGeometry(QtCore.QRect(740, 120, 551, 711))
        self.frame_5.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(1170, 94, 121, 31))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(16)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setStyleSheet("font: 13pt \"黑体\";")
        self.label_5.setObjectName("label_5")

        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(1260, 94, 31, 32))
        self.label_8.setStyleSheet("QWidget{\n"
                                   "border-image:url(:/png/icon/preview.png);}")
        self.label_8.setText("")
        self.label_8.setObjectName("label_8")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(80, 94, 31, 31))
        self.label_9.setStyleSheet("QWidget{\n"
                                   "border-image:url(:/png/icon/set.png);}")
        self.label_9.setText("")
        self.label_9.setObjectName("label_9")

        self.locale = locales.getLocale()

        self.main_grid = QVBoxLayout(self.frame_5)
        self.main_grid.addWidget(self.init3dWidget())
        Ui_MainWindow.slider = QSlider(Qt.Horizontal)
        Ui_MainWindow.slider.setEnabled(False)
        self.main_grid.addWidget(Ui_MainWindow.slider)
        self.label_8 = QLabel("0")
        self.label.setFont(QFont('Arial Black', 20))
        self.label_8.setAlignment(Qt.AlignCenter)
        self.main_grid.addWidget(self.label_8)

        # self.bottom_panel = self.initBottomPanel()
        # self.bottom_panel.setEnabled(False)
        # main_grid.addWidget(self.bottom_panel, 20, 0, 2, 7)



        self.planeActor = gui_utils.createPlaneActorCircle(params.PlaneCenter)
        self.planeTransform = vtk.vtkTransform()
        self.render.AddActor(self.planeActor)
        self.render.ResetCamera()

        self.planes = []
        self.planesActors = []

        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(740, 830, 631, 71))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.verticalLayoutWidget_2)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_7 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.horizontalLayout_2.addWidget(self.label_7)

        self.label_6 = QtWidgets.QLabel(self.verticalLayoutWidget_2)
        self.label_6.setText("")
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_2.addWidget(self.label_6)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1378, 26))
        self.menubar.setStyleSheet("background-color: rgb(85, 170, 255,180);")
        self.menubar.setObjectName("menubar")
        self.menu = QtWidgets.QMenu(self.menubar)
        self.menu.setStyleSheet("background-color: rgb(234, 234, 234);")
        self.menu.setObjectName("menu")
        self.menu_2 = QtWidgets.QMenu(self.menubar)
        self.menu_2.setStyleSheet("background-color: rgb(234, 234, 234);")
        self.menu_2.setObjectName("menu_2")
        self.menu_3 = QtWidgets.QMenu(self.menubar)
        self.menu_3.setStyleSheet("background-color: rgb(234, 234, 234);")
        self.menu_3.setObjectName("menu_3")
        self.menu_4 = QtWidgets.QMenu(self.menubar)
        self.menu_4.setStyleSheet("background-color: rgb(234, 234, 234);")
        self.menu_4.setObjectName("menu_4")
        self.menu_CMY = QtWidgets.QMenu(self.menubar)
        self.menu_CMY.setStyleSheet("background-color: rgb(234, 234, 234);")
        self.menu_CMY.setObjectName("menu_CMY")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # self.actionOpen = QtWidgets.QAction(MainWindow)
        # self.actionOpen.setObjectName("actionOpen")
        # self.actionClose = QtWidgets.QAction(MainWindow)
        # self.actionClose.setObjectName("actionClose")
        # self.actionSave = QtWidgets.QAction(MainWindow)
        # self.actionSave.setObjectName("actionSave")
        # self.actionQuit = QtWidgets.QAction(MainWindow)
        # self.actionQuit.setObjectName("actionQuit")
        # self.actionPath = QtWidgets.QAction(MainWindow)
        # self.actionPath.setObjectName("actionPath")
        # self.actionAbout_Us = QtWidgets.QAction(MainWindow)
        # self.actionAbout_Us.setObjectName("actionAbout_Us")
        self.actionColor_Select = QtWidgets.QAction(MainWindow)
        self.actionColor_Select.setObjectName("actionColor_Select")
        # self.menu.addAction(self.actionOpen)
        # self.menu.addAction(self.actionClose)
        # self.menu.addAction(self.actionSave)
        # self.menu.addAction(self.actionQuit)
        # self.menu_2.addAction(self.actionPath)
        # self.menu_4.addAction(self.actionAbout_Us)
        self.menu_CMY.addAction(self.actionColor_Select)
        self.menubar.addAction(self.menu.menuAction())
        self.menubar.addAction(self.menu_2.menuAction())
        self.menubar.addAction(self.menu_3.menuAction())
        self.menubar.addAction(self.menu_4.menuAction())
        self.menubar.addAction(self.menu_CMY.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "3D打印切片后处理应用软件"))
        MainWindow.setToolTip(_translate("MainWindow", "Designed By Yu"))
        Ui_MainWindow.one_color_radio.setText(_translate("MainWindow", "单色打印"))
        self.label_select_one_color.setText(_translate("MainWindow", "选择的颜色"))
        Ui_MainWindow.one_color_item.setText(_translate("MainWindow", "选择的颜色"))
        self.much_layers_radio.setText(_translate("MainWindow", "分层彩色打印"))
        self.checkBox_3.setText(_translate("MainWindow", "平均分层"))
        self.checkBox_4.setText(_translate("MainWindow", "自定义分层"))
        self.layers_num_label.setText(_translate("MainWindow", "分段数"))
        Ui_MainWindow.mix_colors_radio.setText(_translate("MainWindow", "渐变打印"))
        self.checkBox_2.setText(_translate("MainWindow", "平均渐变"))
        self.checkBox.setText(_translate("MainWindow", "自定义渐变"))
        self.mix_colors_num_label.setText(_translate("MainWindow", "渐变次数"))
        Ui_MainWindow.handle.setText(_translate("MainWindow", " 处理"))
        self.name_label.setText(_translate("MainWindow", "选择的文件"))
        Ui_MainWindow.namein.setText(_translate("MainWindow", ""))
        Ui_MainWindow.totalHeight.setText(_translate("MainWindow", ""))
        self.label_4.setText(_translate("MainWindow", "打印模式"))
        self.label_5.setText(_translate("MainWindow", "模型预览"))
        # self.pushButton.setText(_translate("MainWindow", "预览"))
        # self.menu.setTitle(_translate("MainWindow", "开始"))
        # self.menu_2.setTitle(_translate("MainWindow", "设置"))
        # self.menu_3.setTitle(_translate("MainWindow", "帮助"))
        # self.menu_4.setTitle(_translate("MainWindow", "关于"))
        self.menu_CMY.setTitle(_translate("MainWindow", "自定义CMY"))
        # self.actionOpen.setText(_translate("MainWindow", "Open"))
        # self.actionClose.setText(_translate("MainWindow", "Close"))
        # self.actionSave.setText(_translate("MainWindow", "Save"))
        # self.actionQuit.setText(_translate("MainWindow", "Quit"))
        # self.actionPath.setText(_translate("MainWindow", "Path"))
        # self.actionAbout_Us.setText(_translate("MainWindow", "About Us"))
        self.actionColor_Select.setText(_translate("MainWindow", "Color_Setting"))

    def init3dWidget(self):
        widget3d = QVTKRenderWindowInteractor()
        widget3d.Initialize()
        widget3d.Start()
        self.render = vtk.vtkRenderer()
        self.render.SetBackground(params.BackgroundColor)
        widget3d.GetRenderWindow().AddRenderer(self.render)
        self.interactor = widget3d.GetRenderWindow().GetInteractor()
        self.interactor.GetInteractorStyle().SetCurrentStyleToTrackballCamera()
        self.axesWidget = gui_utils.createAxes(self.interactor)
        return widget3d

    def loadSTL(self, filename, method=gui_utils.createStlActorInOrigin):
        self.stlActor, self.stlTranslation, self.stlBounds = method(filename)
        # self.xPosition_value.setText(str(self.stlTranslation[0])[:10])
        # self.yPosition_value.setText(str(self.stlTranslation[1])[:10])
        # self.zPosition_value.setText(str(self.stlTranslation[2])[:10])

        self.clearScene()
        self.planeActor = gui_utils.createPlaneActorCircle(params.PlaneCenter)
        self.render.AddActor(self.planeActor)

        self.render.AddActor(self.stlActor)
        # self.bottom_panel.setEnabled(True)
        # self.loadPlanes()
        # self.stateStl()
        self.openedStl = filename
        self.render.ResetCamera()
        self.reloadScene()

    def process_change1(self):  # 导入文件进度条
        global count1
        global vv1
        global vv2
        global fileopen
        global set
        global timer1
        global step
        global trans
        # global rm
        # global rm1

        #count1 = 0
        step += 1
        if (count1 == 0):
            for i in range(3333):
                fileopen.setValue(i)
            count1 += 1
        if (vv1 == True):
            for i in range(3333, 6666):
                fileopen.setValue(i)
            vv1 = False
        if (vv2 == True):
            for i in range(6666, 10001):
                fileopen.setValue(i)
            vv2 = False
            count1 = 0
            rm1 = trans.findChild((QProgressBar,), "fileopen")
            rm1.setParent(None)
            timer1.stop()
        if step > 10:
            timer1.stop()
            rm = trans.findChild((QProgressBar,), "fileopen")
            rm.setParent(None)
            step = 0

        # for i in range(9999):
        # process.setValue(i)

    def loading1(self):
        global fileopen
        global timer1
        global step
        global count1
        count1 = 0
        step = 0
        fileopen = QProgressBar(trans)
        fileopen.setObjectName("fileopen")
        fileopen.setGeometry(400, 120, 450, 20)
        # self.fileopen.setGeometry(220, 20, 921, 61)
        # print(trans)
        #    process.setWindowFlags(QtCore.Qt.WindowCloseButtonHint|QtCore.Qt.WindowContextHelpButtonHint)
        timer1 = QTimer(fileopen)
        fileopen.setRange(0, 10000)
        # fileopen.setAutoClose(True)
        fileopen.show()
        timer1.start(1000)
        timer1.timeout.connect(self.process_change1)

    def openFile(self):
        base = False
        base1 = False
        base2 = False
        base3 = False
        base4 = False
        base5 = False
        base6 = False

        global lines
        global layerm
        global filename
        global process
        global fileopen
        global vv1
        global vv2
        vv1 = False
        vv2 = False

        filename = str(
                QFileDialog.getOpenFileName(None, self.locale.OpenModel, ",",
                                            "GCODE(*.gcode);;STL(*.stl)")[0])  # TODO: fix path

        if filename != "":
            layerm = 0
            # self.planes = []
            fileExt = os.path.splitext(filename)[1].upper()
            filename = str(Path(filename))
            if fileExt == ".STL":
                try:
                    self.loadSTL(filename)
                    QApplication.processEvents()
                    Ui_MainWindow.one_color_radio.setEnabled(False)
                    Ui_MainWindow.much_layers_radio.setEnabled(False)
                    Ui_MainWindow.mix_colors_radio.setEnabled(False)
                    Ui_MainWindow.one_color_item.setEnabled(False)
                    Ui_MainWindow.handle.setEnabled(False)
                    _translate = QtCore.QCoreApplication.translate
                    Ui_MainWindow.totalHeight.setText(_translate("MainWindow", ""))
                    Ui_MainWindow.namein.setText(_translate("MainWindow", ""))
                except:
                    self.exception_handling("stl文件导入失败")

                    # global fileopen
            elif fileExt == ".GCODE":
                try:
                    self.layer_add(filename)
                    self.loading1()
                    print("loading")
                    self.loadGCode(filename, False)
                    QApplication.processEvents()
                    print("loading")
                    vv1 = True
                    with open(filename) as file1:
                        lines = file1.readlines()
                        for i in range(len(lines)):
                            if (";LAYER" in lines[i] and "COUNT" not in lines[i]):
                                layerm += 1
                                base = True
                            if ("Generated with Cura_SteamEngine" in lines[i]):
                                base1 = True
                                indexa = i
                            if ("PrusaSlicer" in lines[i]):
                                base2 = True
                            if base2:
                                if (lines[i].startswith("; layer_height")):
                                    base5 = True
                                if (lines[i].startswith("; first_layer_height")):
                                    base6 = True

                        for i in range(len(lines)):
                            if base1:
                                # print(i)
                                if (";MINZ:" in lines[i]):
                                    # print(i)
                                    base3 = True
                                    continue
                                if (";Layer height:" in lines[i]):
                                    base4 = True
                    vv2 = True
                    if not (base or base1 or base2 or base3 or base4 or base5 or base6) :
                        raise Exception

                    Ui_MainWindow.one_color_radio.setEnabled(True)
                    Ui_MainWindow.much_layers_radio.setEnabled(True)
                    Ui_MainWindow.mix_colors_radio.setEnabled(True)
                    _translate = QtCore.QCoreApplication.translate
                    Ui_MainWindow.totalHeight.setText(_translate("MainWindow", "您选择的Gcode共有%i层" % layerm))
                    self.suggestion1.setText(_translate("MainWindow", "导入文件成功！"))
                    Ui_MainWindow.namein.setText(_translate("MainWindow", "%s" % filename))
                    Ui_MainWindow.slider.setEnabled(True)
                    Ui_MainWindow.slider.setMinimum(1)
                    Ui_MainWindow.slider.setMaximum(layerm)
                    Ui_MainWindow.slider.setSingleStep(1)
                    Ui_MainWindow.slider.setValue(1)
                    Ui_MainWindow.slider.valueChanged.connect(self.valueChange)

                    # Ui_MainWindow.slider.valueChanged.connect(self.loading1)

                except:
                    self.exception_handling("gcode文件导入失败")

            else:
                print("This file format isn't supported:", fileExt)
        # except IOError as e:
        # print("Error during file opening:", e)



    def exception_handling(self,suggestion):
        _translate = QtCore.QCoreApplication.translate
        self.suggestion1.setText(_translate("MainWindow", suggestion))
        self.handle.setEnabled(False)
        self.checkBox_4.setChecked(False)
        self.checkBox.setChecked(False)
        self.checkBox_2.setChecked(False)
        self.checkBox_3.setChecked(False)
        self.checkBox_3.setEnabled(False)
        self.checkBox.setEnabled(False)
        self.checkBox_2.setEnabled(False)
        self.checkBox_4.setEnabled(False)
        Ui_MainWindow.one_color_radio.setChecked(False)
        Ui_MainWindow.one_color_radio.setEnabled(False)
        Ui_MainWindow.much_layers_radio.setChecked(False)
        Ui_MainWindow.much_layers_radio.setEnabled(False)
        Ui_MainWindow.mix_colors_radio.setChecked(False)
        Ui_MainWindow.mix_colors_radio.setEnabled(False)
        self.layers_num.setText("")
        self.mix_colors_num.setText("")
        self.layers_num.setEnabled(False)
        self.mix_colors_num.setEnabled(False)
        self.slider.setEnabled(False)
        Ui_MainWindow.totalHeight.setText(_translate("MainWindow", " "))
        Ui_MainWindow.namein.setText(_translate("MainWindow", " "))


    def open_gcode(self,nameout):
        layerm1 = 0
        self.loadGCode(nameout ,False)
        with open(nameout) as file1:
            lines = file1.readlines()
            for i in range(len(lines)):
                if (";LAYER" in lines[i] and "COUNT" not in lines[i]):
                    layerm1 += 1
        # print(layerm1)
        Ui_MainWindow.one_color_radio.setEnabled(True)
        Ui_MainWindow.much_layers_radio.setEnabled(True)
        Ui_MainWindow.mix_colors_radio.setEnabled(True)
        _translate = QtCore.QCoreApplication.translate
        Ui_MainWindow.totalHeight.setText(_translate("MainWindow", "您选择的Gcode共有%i层" % layerm1))
        Ui_MainWindow.namein.setText(_translate("MainWindow", "%s" % nameout))
        Ui_MainWindow.slider.setEnabled(True)
        Ui_MainWindow.slider.setMinimum(1)
        Ui_MainWindow.slider.setMaximum(layerm1)
        Ui_MainWindow.slider.setSingleStep(1)
        Ui_MainWindow.slider.setValue(1)
        Ui_MainWindow.slider.valueChanged.connect(self.valueChange)

    def valueChange(self):
        try:
            size = Ui_MainWindow.slider.value()
            self.label_8.setText(str(size))
            # layers2 = []
            # color2 = []
            # divide = []
            actors2 = []

            for i in range (size):
                actors2.append(self.actors[i])
            for a in range(len(actors2)):
                if len(self.gode.color) == 0:
                    actors2[a].GetProperty().SetColor(params.LastLayerColor)
                elif len(self.gode.color) == 1:
                    actors2[a].GetProperty().SetColor(self.gode.color[0][0] / 255, self.gode.color[0][1] / 255, self.gode.color[0][2] / 255)
                elif len(self.gode.color) >1:
                    for i in range(len(self.gode.color)):
                        if self.gode.divide[i]<=a<self.gode.divide[i+1]:
                            actors2[a].GetProperty().SetColor(self.gode.color[i][0] / 255, self.gode.color[i][1] / 255,
                                                              self.gode.color[i][2] / 255)

            actors2[-1].GetProperty().SetColor(params.LayerColor)
            # if len(self.gode.color) == 0:
            #     blocks2 = gui_utils.makeBlocks(layers2)
            #     self.actors = gui_utils.wrapWithActors(blocks2, self.gode.rotations, self.gode.lays2rots,color2)#None不能使用len方法
            # if len(self.gode.color) == 1:
            #     color2.append(self.gode.color[0])
            #     blocks2 = gui_utils.makeBlocks(layers2)
            #     self.actors = gui_utils.wrapWithActors(blocks2, self.gode.rotations, self.gode.lays2rots,color2)
            # if len(self.gode.color)>1:
            #     for i in range(len(self.gode.color)):
            #         for layer in range (self.gode.divide[i],self.gode.divide[i+1]):
            #             if layer == size-1:
            #                 for a in range(i+1):
            #                     color2.append(self.gode.color[a])
            #                     divide.append(self.gode.divide[a])
            #                 divide.append(self.gode.divide[i+1])
                #                 print(color2,divide,size)
                #     blocks2 = gui_utils.makeBlocks(layers2)
                #     self.actors = gui_utils.wrapWithActors(blocks2, self.gode.rotations, self.gode.lays2rots, color2,divide)

            self.clearScene()
            self.render.AddActor(self.planeActor)

            for actor in actors2:
                self.render.AddActor(actor)


            # self.loadPlanes()
            # self.bottom_panel.setEnabled(False)

            # if addStl:
            #     self.stateBoth(len(self.actors))
            # else:
            #     self.stateGcode(len(self.actors))

            self.openedGCode = filename
            self.reloadScene()
            QApplication.processEvents()
        except:
            self.exception_handling("分层预览失败")

    def loadGCode(self, filename, addStl):
        try:
            gode = gcode.readGCode(filename)
            self.gode = gode
        except:
            self.exception_handling("gcode文件解析失败")

        try:
            blocks = gui_utils.makeBlocks(self.gode.layers)
            self.blocks = blocks
            print(len(blocks))
        except:
            self.exception_handling("面片生成失败")
        try:
            self.actors = gui_utils.wrapWithActors(self.blocks, self.gode.rotations, self.gode.lays2rots,self.gode.color,self.gode.divide)
            self.clearScene()
            self.planeActor = gui_utils.createPlaneActorCircle(self.gode.center)
            self.render.AddActor(self.planeActor)
            if addStl:
                self.render.AddActor(self.stlActor)

            self.rotatePlane(self.gode.rotations[-1])
            for actor in self.actors:
                self.render.AddActor(actor)

            # self.loadPlanes()
            # self.bottom_panel.setEnabled(False)

            # if addStl:
            #     self.stateBoth(len(self.actors))
            # else:
            #     self.stateGcode(len(self.actors))

            self.openedGCode = filename
            self.render.ResetCamera()
            self.reloadScene()
        except:
            self.exception_handling("文件渲染失败")

    def clearScene(self):
        self.render.RemoveAllViewProps()

    def reloadScene(self):
        self.render.Modified()
        self.interactor.Render()

    def rotatePlane(self, rotation):
        transform = vtk.vtkTransform()
        transform.PostMultiply()
        transform.RotateZ(rotation.z_rot)
        transform.PostMultiply()
        transform.RotateX(rotation.x_rot)
        self.planeActor.SetUserTransform(transform)
        self.planeTransform = transform

    def layer_add(self,input_file_name):
        with open(input_file_name, "r+") as f:
            linestoedit = f.readlines()
            j = -1

            for i in range(len(linestoedit)):
                if ";LAYER:" in linestoedit[i]:
                    break
                if 'G1' in linestoedit[i] and 'Z' in linestoedit[i] and 'F' in linestoedit[i] and 'nozzle' not in \
                        linestoedit[i]:
                    j += 1
                    linestoedit[i] = linestoedit[i].replace(linestoedit[i],
                                                            ";LAYER:" + "{}".format(j) + "\n" + linestoedit[i])
            count = "LAYER_COUNT:{}".format(j)
            m = len(linestoedit)
            self.save_3rfile(input_file_name, linestoedit, count, m)

    def save_3rfile(self,inputfilename, linestoedit, count, m):
        with open(inputfilename, "w+") as fw:
            for i in range(m):
                fw.write(linestoedit[i])
            #fw.write('\n' + ';' + count)
            # f.close()