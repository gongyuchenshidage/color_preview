# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\untitled\untitled81\untitled731（1）\untitled\untitled\SelfDesign.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QColorDialog, QLineEdit, QPushButton

import Color_Select
from Color_Select import selfprint

color = [255, 255, 255]
class Ui_SelfDesign(object):
    def setupUi(self, SelfDesign):
        SelfDesign.setObjectName("SelfDesign")
        SelfDesign.resize(500, 300)
        global ysn1
        ysn1 = SelfDesign
        self.buttonBox = QtWidgets.QDialogButtonBox(SelfDesign)
        self.buttonBox.setGeometry(QtCore.QRect(0, 220, 350, 30))
        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
        self.buttonBox.setObjectName("buttonBox")
        self.labelofcolor = QtWidgets.QLabel(SelfDesign)
        self.labelofcolor.setGeometry(QtCore.QRect(70,40, 60, 28))
        self.labelofcolor.setObjectName("labelofcolor")
        self.Color = QtWidgets.QPushButton(SelfDesign)
        self.Color.setGeometry(QtCore.QRect(150,40, 90, 28))
        self.Color.setObjectName("Color")
        try:
            self.Color.setStyleSheet("QPushButton{background:%s}" % str(Color_Select.selfcolor[Color_Select.yy]))
            global y
            y = str(Color_Select.selfcolor[Color_Select.yy])
#            print(y)
            global color
            color = getRGB(y)
#            print(color)
            global selfcmy
            selfcmy = [Color_Select.selfcmya[Color_Select.yy][0],Color_Select.selfcmya[Color_Select.yy][1],Color_Select.selfcmya[Color_Select.yy][2]]
#            print(selfcmy)
            global ysn123
            ysn123 = "{}:{}:{}".format(selfcmy[0],selfcmy[1],selfcmy[2])
#            print(ysn123)
        except:
            pass
        self.Color.clicked.connect(selfcolor)
        self.labelofcmy = QtWidgets.QLabel(SelfDesign)
        self.labelofcmy.setGeometry(260,40,60,28)
        self.CMY = QtWidgets.QLineEdit(SelfDesign)
        self.CMY.setGeometry(QtCore.QRect(340,40,90,28))
        self.CMY.setObjectName("CMY")
        try:
            self.CMY.setText(selfprint[Color_Select.yy])
        except:
            pass
        self.CMY.textChanged.connect(getCMY)
        self.totallabel = QtWidgets.QLabel(SelfDesign)
        self.totallabel.setObjectName("totallabel")
        self.totallabel.setGeometry(50,110,400,20)
        self.totallabel2 = QtWidgets.QLabel(SelfDesign)
        self.totallabel2.setGeometry(50,150,400,20)
        self.retranslateUi(SelfDesign)
        self.buttonBox.accepted.connect(SelfDesign.accept)
        self.buttonBox.rejected.connect(SelfDesign.reject)
        QtCore.QMetaObject.connectSlotsByName(SelfDesign)

    def retranslateUi(self, SelfDesign):
        _translate = QtCore.QCoreApplication.translate
        SelfDesign.setWindowTitle(_translate("SelfDesign", "自定义"))
        self.Color.setText(_translate("SelfDesign", "选择的颜色"))
        self.labelofcolor.setText(_translate("SelfDesign", "颜色设置"))
        self.labelofcmy.setText(_translate("SelfDesign", "原料比例"))
        self.totallabel.setText(_translate("SelfDesign", "注：1.请英文状态下按照0:0:0的格式输入原料比例CMY"))
        self.totallabel2.setText(_translate("SelfDesign", "   2.若未选用本公司指定材料，请勿混用默认和自定义色卡"))

    def accept(self):
        pass

    def reject(self):
        pass

def getRGB(str):
    output = []
    color_1 = str[1:][:2]
    color_1_final = hex2dec(color_1)
    output.append(color_1_final)
    color_2 = str[1:][2:4]
    color_2_final = hex2dec(color_2)
    output.append(color_2_final)
    color_3 = str[1:][4:]
    color_3_final = hex2dec(color_3)
    output.append(color_3_final)
    return output

def hex2dec(str):
    return int(str, 16)

def selfcolor():
    ab = QColorDialog.getColor()
    global color
    try:
        global y
        global color
        y = ab.name()
        color = getRGB(y)
        ysn12 = ysn1.findChild((QPushButton,), "Color")
        ysn12.setStyleSheet("QPushButton{background:%s}" % y)
    except:
        color = [255,255,255]
        ysn12 = ysn1.findChild((QPushButton,),"Color")
        ysn12.setStyleSheet("QPushButton{background:}")
    global selfcmy
    selfcmy = Color_Select.selfcmya[Color_Select.yy]
    global ysn123
    ysn123 = Color_Select.selfprint[Color_Select.yy]

def getCMY():
    global ysn123
    ysn12 = ysn1.findChild((QLineEdit,),"CMY")
    ysn123 = ysn12.text()
#    print(ysn123)
    global selfcmy
    selfcmy = ysn123.split(":")
    if(len(selfcmy) < 3):
        return
    try:
        selfcmy[0] = int(ysn123.split(":")[0])
        selfcmy[1] = int(ysn123.split(":")[1])
        selfcmy[2] = int(ysn123.split(":")[2])
#        print(selfcmy)
    except:
        pass

def givensetting():
    global selfcmy
    global y
    global color
    global ysn123
    return [y,color,selfcmy,ysn123]