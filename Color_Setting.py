# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'D:\untitled\Color_Setting.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import json
import re
from functools import partial

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QPushButton, QFileDialog, QMessageBox

import Color_Select
import SelfDesign
from Color_Select import selfcolor
from Color_Select import selfcmya
from Color_Select import selfprint
class Ui_Color_Setting(object):
    def setupUi(self, Color_Setting):
        Color_Setting.setObjectName("Color_Setting")
        Color_Setting.resize(440, 675)
        global ysn123
        ysn123 = Color_Setting
#        self.buttonBox = QtWidgets.QDialogButtonBox(Color_Setting)
#        self.buttonBox.setGeometry(QtCore.QRect(90, 630, 341, 32))
#        self.buttonBox.setOrientation(QtCore.Qt.Horizontal)
#        self.buttonBox.setStandardButtons(QtWidgets.QDialogButtonBox.Cancel|QtWidgets.QDialogButtonBox.Ok)
#        self.buttonBox.setObjectName("buttonBox")
        self.verticalLayoutWidget = QtWidgets.QWidget(Color_Setting)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(70, 10, 300, 571))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.layoutx = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.layoutx.setContentsMargins(0, 0, 0, 0)
        self.layoutx.setObjectName("layoutx")
        self.default2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.default2.setObjectName("default2")
        self.layoutx.addWidget(self.default2)
        self.color_group1 = QtWidgets.QGridLayout()
        self.color_group1.setContentsMargins(0, -1, -1, -1)
        self.color_group1.setObjectName("color_group1")
        colors = ["#80c7d9", "#f468c1", "#dfd759", "#a090bf",
                  "#af70ac", "#be5CA5", "#d25faa", "#e36b8e",
                  "#e16d80", "#df7C78", "#e19f71", "#c2d369",
                  "#a9cb7e", "#99c391", "#8dc5a8", "#8a9181",
                  "#955B6a", "#a33f59", "#bb2C4d", "#a0a172",
                  "#b2684e", "#ac9841", "#a8924e", "#cea23b"]
        position = [(i, j) for i in range(6) for j in range(4)]
        for pos,name in zip(position,colors):
            button = QPushButton("")
            button.setStyleSheet("QPushButton{background:%s}" % str(name))
            #            button.resize(50,10)
            index = colors.index(name)
            button.setObjectName("buttonintable%s" % str(index))
            self.color_group1.addWidget(button, *pos)
        self.layoutx.addLayout(self.color_group1)
        self.selfdesigncolorgroup = QtWidgets.QLabel(self.verticalLayoutWidget)
        self.selfdesigncolorgroup.setObjectName("selfdesigncolorgroup")
        self.layoutx.addWidget(self.selfdesigncolorgroup)
        self.selfdesigncolor_group = QtWidgets.QGridLayout()
        self.selfdesigncolor_group.setObjectName("selfdesigncolor_group")
        position1 = [(i, j) for i in range(6) for j in range(4)]
        #不配置也要在colorselect里读json
        for pos1 in position1:
            button1 = QPushButton()
            index1 = position1.index(pos1)
            try:
                button1.setStyleSheet("QPushButton{background:%s}" % str(selfcolor[index1]))
                button1.setText(selfprint[index1])
                #            print(index1)
            except:
                pass
            button1.setObjectName("selfbuttonintable%s" % str(index1))
            button1.clicked.connect(partial(selfdesignsetting, button1.objectName()))
            self.selfdesigncolor_group.addWidget(button1, *pos1)
        self.layoutx.addLayout(self.selfdesigncolor_group)
        self.layoutextra = QtWidgets.QHBoxLayout()
        self.layoutextra.setObjectName("layoutextra")
        self.layoutx.addLayout(self.layoutextra)
        self.button2 = QtWidgets.QPushButton()
        self.button2.setObjectName("exportGcode")
        self.button2.clicked.connect(exportit)
        self.layoutextra.addWidget(self.button2)
        self.button3 = QtWidgets.QPushButton()
        self.button3.setObjectName("savesettings")
        self.button3.clicked.connect(savejson)
        self.layoutextra.addWidget(self.button3)
        self.layoutx.setStretch(1, 1)
        self.layoutx.setStretch(3, 1)

        self.retranslateUi(Color_Setting)
        QtCore.QMetaObject.connectSlotsByName(Color_Setting)

    def retranslateUi(self, Color_Setting):
        _translate = QtCore.QCoreApplication.translate
        Color_Setting.setWindowTitle(_translate("Color_Setting", "颜色配置"))
        self.default2.setText(_translate("Color_Setting", "默认颜色"))
        self.selfdesigncolorgroup.setText(_translate("Color_Setting", "自定义颜色"))
        self.button2.setText(_translate("Color_Setting", "导出测试Gcode"))
        self.button3.setText(_translate("Color_Setting", "保存配置"))


        def accept(self):
            pass

def selfdesignsetting(objectname):#啥也不点直接ok会报错
    global setting
    setting = [0,0,0,0]
    Color_Select.yy = int(re.search('[0-9]\d{1,2}|\d', objectname).group(0))
    m = QtWidgets.QDialog()
    ui3 = SelfDesign.Ui_SelfDesign()
    ui3.setupUi(m)
    m.exec()
    for i in range(24):
        index1 = re.search('[0-9]\d{1,2}|\d', objectname).group(0)
        #        print(index)
        objectname123 = objectname.replace(str(index1), str(i))
        #        print(objectname123)
        object12345 = ysn123.findChild((QPushButton,), objectname123)
    try:
        # print("oh my god")
        setting = SelfDesign.givensetting()
        # print(setting)
        if(setting[2] != 0):
            # print("-2")
            global cm
            global yq
            global aa
            cm = setting[0]
            # setting = ('',[255,255,255],[1,2,3],'1:2:3')
            yq = ""
            # print(cm)
            # print(setting)
            # print(selfcolor)
            # print(selfcmya)
            # print(selfprint)
            index = int(re.search('[0-9]\d{1,2}|\d', objectname).group(0))
            if(cm != ""):
                selfcolor[index] = setting[0]
                selfcmya[index] = setting[2]
                selfprint[index] = setting[3]
                ysn1234 = ysn123.findChild((QPushButton,), objectname)
                ysn1234.setStyleSheet("QPushButton{background:%s}" % str(setting[0]))
                ysn1234.setText(selfprint[index])
            else:
                selfcolor[index] = ""
                selfcmya[index] = setting[2]
                selfprint[index] = setting[3]
                ysn1234 = ysn123.findChild((QPushButton,), objectname)
                ysn1234.setStyleSheet("QPushButton{background:}")
                ysn1234.setText(selfprint[index])
                #print(selfprint[index])
                selfcmya[index] = setting[2]
    except:
        ysn1234 = ysn123.findChild((QPushButton,), objectname)
        ysn1234.setStyleSheet("QPushButton{background}")
        ysn1234.setText("")

def exportit():#导出Gcode按钮后端逻辑
    savejson()
    export()

def savejson():#保存按钮后端逻辑
    startpart = '''
        {
        "colors":[
        '''
    endpart = '''
        ]
        }'''
    a = addsomething()
    with open("setting.json", "w+") as f:
        l = startpart + a + endpart
        f.write(l)

def addsomething():
    items = []
    for i in range(24):
        #        print("start" + str(i))
        t = gotit(i)
        if (t == ""):
            continue
        else:
            items.append(t)
            #        print("end" + str(i))
    return ",".join(items)

def gotit(index):
    #    print("mid" + str(index))
    if (Color_Select.selfcmya[index] != ""):
        x = Color_Select.selfcmya[index][0]
        y = Color_Select.selfcmya[index][1]
        z = Color_Select.selfcmya[index][2]
        if(selfcolor[index] != ""):
            t = Color_Select.selfcolor[index]
            u = getRGB(Color_Select.selfcolor[index])[0]
            v = getRGB(Color_Select.selfcolor[index])[1]
            w = getRGB(Color_Select.selfcolor[index])[2]
        else:
            t = Color_Select.selfcolor[index]
            u = 0
            v = 0
            w = 0
        return """
                {{
                    "colorname":"{0}",
                    "R":{1},
                    "G":{2},
                    "B":{3},
                    "C":{4},
                    "M":{5},
                    "Y":{6}
                }}
                """.format(t, u, v, w, x, y, z)
    else:
        return ""

def export():
    # 输出色卡
    myexport = QFileDialog.getSaveFileName()[0]
    if (myexport == ""):
        msg_box3 = QMessageBox(QMessageBox.Warning, '提示', '请输入正确文件名！')
        msg_box3.exec_()
        return
    else:
        if not (myexport.endswith(".gcode")) or not (myexport.endswith(".GCODE")):
            myexport = myexport + ".gcode"
#            print(myexport)
    with open("setting.json", "r") as ff:
        data = json.load(ff)
        jsonsetting = data['colors']
    with open("colortest.gcode", "r", encoding="utf-8") as mycolorcard:
        mydata = mycolorcard.readlines()
        colorcardcount = 1
        alllenth = len(jsonsetting)
#        print(alllenth)  # 为啥是24
        for i in range(len(mydata)):
            tempovar = "色卡%s开始" % str(colorcardcount)
            if (tempovar in mydata[i]) and (colorcardcount <= alllenth):
                mydata[i + 1] = mydata[i + 1].replace(mydata[i + 1], "M165 A{0} B{1} C{2}\n".format(
                    Color_Select.selfcmya[colorcardcount - 1][0], Color_Select.selfcmya[colorcardcount - 1][1],
                    Color_Select.selfcmya[colorcardcount - 1][2]))
                colorcardcount += 1
                # print(tempovar)
            elif (tempovar in mydata[i]) and (colorcardcount == alllenth + 1):
                deletestart = i
            elif ("结束代码" in mydata[i]):
                deletestop = i
                for i in range(deletestart, deletestop - 1):
                    mydata[i] = ""
                break
    with open(myexport, "w+", encoding="utf-8") as gcodeexport:
        for i in range(len(mydata)):
            gcodeexport.write(mydata[i])
#    print("finishing!")

def getRGB(str):
    output = []
    color_1 = str[1:][:2]
    color_1_final = hex2dec(color_1)
    output.append(color_1_final)
    color_2 = str[1:][2:4]
    color_2_final = hex2dec(color_2)
    output.append(color_2_final)
    color_3 = str[1:][4:]
    color_3_final = hex2dec(color_3)
    output.append(color_3_final)
    return output

def hex2dec(str):
    return int(str, 16)